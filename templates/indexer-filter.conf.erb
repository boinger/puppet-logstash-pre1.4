
filter {
  # overview:        http://logstash.net/docs/1.2.1/filters/grok
  # regex:           http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt
  # test cases:      https://github.com/logstash/logstash/blob/v1.2.1/spec/filters/grok.rb
  # black box cases: https://github.com/Icix/ops-tests/blob/master/logstash_spec.rb

  if ! [shn] {
    if [host] =~ /[a-zA-Z]+/ {
      mutate {
        add_field => {"shn" => "%{host}"}
      }
      mutate {
        gsub => ["shn", '\..*', '']
      }
    }
  }

  if ! [fqdn] {
    if [host] =~ /\./ {
      if [host] !~ /\d+\.\d+\.\d+\.\d+/ {
        mutate {
          add_field => {"fqdn" => "%{host}"}
        }
      }
    }
  }

  if [type] == "lumberjack" {
    mutate {
      remove_field => ["offset"]
    }
  }

  if [file] == "/var/log/secure" {
    grok {
      match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_host} %{SYSLOGPROG}: %{GREEDYDATA:message}"]
      overwrite => ["message"]
      remove_field => ["syslog_host"]
    }

    if [program] == "sudo" {
      grep {
        match => [ "message", "COMMAND=/usr/lib64/nagios/plugins/icix/check_svstat.pl" ]
        negate => true
      }
    }

    date {
      match => ["syslog_timestamp",  "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
      remove_field => ["syslog_timestamp"]
    }

    if [program] == "sshd" {
      mutate {
        add_field => {'sshd_increment' => "%{message}"}
      }
      mutate {
        lowercase => ['sshd_increment']
        gsub => ['sshd_increment', '\;.*', '',
                 'sshd_increment', '\d+\.\d+\.\d+\.\d+.*', '',
                 'sshd_increment', '(\s+[uU]ser)\s+.*', '\1',
                 'sshd_increment', '^\s*(\w+)\s+\"\/(\w+).*\".*', '\1_\2',
                 'sshd_increment', '\s+from\s+.*$|\s+for\s+.*$|\s+by\s+.*$', '',
                 'sshd_increment', '\W+', '_',
                 'sshd_increment', '^_+|_+$', ''
                ]
      }
    }
  }

  if [file] == "/var/log/messages" {
    grok {
      match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_host} %{SYSLOGPROG}: %{GREEDYDATA:message}"]
      overwrite => ["message"]
      remove_field => ["syslog_host"]
    }

    if [program] == "dhclient" {
      drop {}
    }

    date {
      match => ["syslog_timestamp",  "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
      remove_field => ["syslog_timestamp"]
    }
  }

  if [file] == "/opt/watcher/log/main/current" {
    xml {
      source => "message"
      target => "data"
    }
    if [data] {
      if [data][milliseconds] {
        date {
          match => ["[data][milliseconds]", "UNIX_MS" ]
        }
        mutate {
          remove_field => ["[data][milliseconds]", "[data][date]"]
        }
      }
      if [data][message] {
        mutate {
          replace => [ "message", "%{[data][message]}" ]
        }
        mutate {
          remove_field => ["[data][message]"]
        }
      }
    }
  }

  if [file] == "/opt/processor/log/main/current" {
    grok {
      match => ["message", "\w+ (?<date_string>\w+ \d+ \d+ \d+\:\d+\:\d+) \w+\+\d+ \(\w+\) (?<application_name>\w+)\[(?<error_level>\w+)\]\: tid\: (?<tid>[a-zA-Z0-9\.\-\_]+) sid\: (?<sid>[a-zA-Z0-9\.\-\_]+) (?<message>.+?)(?:\s+(?<elapsed>\d+)ms\s*)?$"]
      overwrite => ["message"]
    }
    if [date_string] {
      date {
        match => ["date_string",  "MMM dd yyyy HH:mm:ss"]
        remove_field => ["date_string"]
      }
    }
  }

  if [type] == "applog" {
    kv {
      field_split => "^"
      value_split => ":"
    }
  }
}
